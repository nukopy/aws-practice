AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for ETL task of "Enjou"
Parameters:
  Prefix:
    Type: String
    Description: Prefix name of resources like "test-enjou-cfn"
    Default: "test-enjou-log-etl-cfn"
  NameBucketLogging:  # S3 with Lambda で循環参照回避のためのパラメータ
    Type: String
    Description: Bucket name of "BucketLoggingAvro" for resolve circular dependency
    Default: "test-enjou-log-etl-cfn-s3-bucket-logging"
Resources:
  ##############################
  # IAM Role
  ##############################

  RoleLambdaEntryPoint:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-lambda-entry-point"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  RoleLambdaFirehoseTransformation:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-lambda-firehose-transformation"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  RoleLambdaS3AvroTransformation:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-lambda-s3-avro-transformation"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  RoleSubscriptionFilter:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-subscription-filter"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        # Version: "2008-10-17" これなんでバージョン違うん？
        Statement:
          - Effect: Allow
            Principal:
              Service: logs.ap-northeast-1.amazonaws.com
            Action: sts:AssumeRole

  RoleFirehoseDeliveryStream:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-firehose-delivery-stream"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"

  ##############################
  # IAM Policy
  ##############################

  PolicyLambdaBasicExecution:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${Prefix}-policy-lambda-basic-execution"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
      Roles:
        - !Ref RoleLambdaEntryPoint
        - !Ref RoleLambdaFirehoseTransformation
        - !Ref RoleLambdaS3AvroTransformation

  PolicyS3FullAccess:
    # https://console.aws.amazon.com/iam/home#/roles/firehose-to-s3
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${Prefix}-policy-s3-read-write"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "s3:*"
            Resource: "*"
      Roles:
        - !Ref RoleLambdaS3AvroTransformation
  
  PolicyFirehoseAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${Prefix}-policy-lambda-basic-execution"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "firehose:*"
            Resource: !Join
              - ""
              - - "arn:aws:firehose:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":*"
      Roles:
        - !Ref RoleSubscriptionFilter
  
  PolicyLambdaAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${Prefix}-policy-lambda-basic-execution"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource: "*"
      Roles:
        - !Ref RoleFirehoseDeliveryStream

  PolicyFirehoseDeliveryStreamS3Access:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${Prefix}-policy-firehose-delivery-stream-s3-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref BucketLogging
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref BucketLogging
                  - "*"
      Roles:
        - !Ref RoleSubscriptionFilter
        - !Ref RoleFirehoseDeliveryStream

  ##############################
  # Lambda
  ##############################

  # function
  LambdaEntryPoint:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt
        - RoleLambdaEntryPoint
        - Arn
      Code: "../src/lambda_functions/entry-point"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-entry-point"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60

  LambdaFirehoseLoggingTransformation:
    Type: AWS::Lambda::Function
    # DependsOn: DeliveryStream
    Properties:
      Role: !GetAtt
        - RoleLambdaFirehoseTransformation
        - Arn
      Code: "../src/lambda_functions/firehose-logging-transformation"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-firehose-logging-transformation"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60

  LambdaS3AvroTransformation:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt
        - RoleLambdaS3AvroTransformation
        - Arn
      Code: "../src/lambda_functions/s3-avro-transformation"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-s3-avro-transformation"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60
  
  # permission
  LambdaInvokePermission:  # Lambda の呼び出し権限を S3 バケットへ与える
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - LambdaS3AvroTransformation
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      # TODO: 循環参照解決したい
      # SourceArn: !GetAtt
      #   - BucketLogging
      #   - Arn
      SourceArn: !Sub "arn:aws:s3:::${NameBucketLogging}"

  ##############################
  # CloudWatch Logs
  ##############################

  # LogGroup
  LogGroupLambdaEntryPoint:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - ""
        - - "/aws/lambda/"
          - !Ref LambdaEntryPoint
      RetentionInDays: 3653 # 省略時，ログの期限切れなし cf: https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html

  # SubscriptionFilter
  SubscriptionFilterLogging:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt
        - RoleSubscriptionFilter
        - Arn
      DestinationArn: !GetAtt
        - DeliveryStreamLogging
        - Arn
      LogGroupName: !Ref LogGroupLambdaEntryPoint
      FilterPattern: "" # TODO: "" は全てのログを DestinationArn へ流す．フィルタリングの設定で JSON だけとか "INFO" だけを抽出できる．

  ##############################
  # S3 bucket
  ##############################

  BucketLogging:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref NameBucketLogging  # TODO: 循環参照解決したい
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"  # "s3:ObjectCreated:Put"
            Function: !GetAtt
              - LambdaS3AvroTransformation
              - Arn

  BucketLoggingAvro:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Prefix}-s3-bucket-logging-avro"

  ##############################
  # Kinesis Data Firehose
  ##############################

  DeliveryStreamLogging:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - PolicyS3FullAccess
    Properties:
      DeliveryStreamName: !Sub "${Prefix}-firehose-delivery-stream-logging"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt
          - RoleFirehoseDeliveryStream
          - Arn
        BucketARN: !Join
          - ""
          - - "arn:aws:s3:::"
            - !Ref BucketLogging # S3 バケットとの関連付け
        BufferingHints: # バッファリングの制限
          IntervalInSeconds: 60
          SizeInMBs: 5
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt
                    - LambdaFirehoseLoggingTransformation
                    - Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Join
            - ""
            - - "/aws/kinesisfirehose/"
              - !Sub "${Prefix}-firehose-delivery-stream-logging"
          LogStreamName: !Sub "${Prefix}-cloudwatch-logs-firehose-delivery-stream-logging"
