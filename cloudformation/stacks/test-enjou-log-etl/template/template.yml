AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for ETL task of "Enjou"
Parameters:
  Prefix:
    Type: String
    Description: Prefix name of resources like "test-enjou-cfn"
Resources:
  ##############################
  # IAM Policy
  ##############################

  PolicyLambdaBasicExecution:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${Prefix}-policy-lambda-basic-execution"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
      Roles:
        - !Ref RoleLambdaEntryPoint
        - !Ref RoleLambdaFirehoseTransformation
        - !Ref RoleLambdaS3AvroTransformation

  PolicyS3ReadWrite:
    # https://console.aws.amazon.com/iam/home#/roles/firehose-to-s3
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${Prefix}-policy-s3-read-write"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource: "*"
              # TODO: あとでアクセスできるリソースごとのロールに切り分ける
              # - !Join
              #   - ""
              #   - - "arn:aws:s3:::"
              #     - !Ref BucketLogging
              # - !Join
              #   - ""
              #   - - "arn:aws:s3:::"
              #     - !Ref BucketLogging
              #     - "*"
      Roles:
        - !Ref RoleLambdaS3AvroTransformation
        - !Ref RoleFirehoseDeliveryStream

  ##############################
  # IAM Role
  ##############################

  RoleLambdaEntryPoint:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-lambda-entry-point"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  
  RoleLambdaFirehoseTransformation:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-lambda-firehose-transformation"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  RoleLambdaS3AvroTransformation:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-lambda-s3-avro-transformation"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  RoleFirehoseDeliveryStream:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-firehose-delivery-stream"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"

  ##############################
  # Lambda functions
  ##############################

  LambdaEntryPoint:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt
        - RoleLambdaEntryPoint
        - Arn
      Code: "../src/lambda_functions/entry-point"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-entry-point"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60

  LambdaFirehoseLoggingTransformation:
    Type: AWS::Lambda::Function
    # DependsOn: DeliveryStream
    Properties:
      Role: !GetAtt
        - RoleLambdaFirehoseTransformation
        - Arn
      Code: "../src/lambda_functions/firehose-logging-transformation"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-firehose-logging-transformation"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60

  LambdaS3AvroTransformation:
    Type: AWS::Lambda::Function
    DependsOn:
      - BucketLogging
      - BucketLoggingAvro
    Properties:
      Role: !GetAtt
        - RoleLambdaS3AvroTransformation
        - Arn
      Code: "../src/lambda_functions/s3-avro-transformation"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-s3-avro-transformation"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60

  ##############################
  # S3 bucket
  ##############################

  BucketLogging:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Prefix}-s3-bucket-logging"
  BucketLoggingAvro:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Prefix}-s3-bucket-logging-avro"

  ##############################
  # Kinesis Data Firehose
  ##############################

  DeliveryStreamLogging:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - PolicyS3ReadWrite  # TODO: ロールの切り分け
      - LambdaEntryPoint
      # TODO: - 本当は Lambda じゃなく，CloudWatch Logs を指定したい
      # 現在のログのソースは Lambda だから良いけど，実際は多様なリソース -> CWL となるから，
      # CWL を間に挟める練習をしておかないとだめ！！（自動生成のロググループに頼らず，自分で作れるようになれってこと！）
      # TODO: そんで CloudWatch Logs をログを吐くリソースに依存させたい
    Properties:
      DeliveryStreamName: !Sub "${Prefix}-firehose-delivery-stream-logging"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt
          - RoleFirehoseDeliveryStream
          - Arn
        BucketARN: !Join 
          - ""
          - - "arn:aws:s3:::"
            - !Ref BucketLogging  # S3 バケットとの関連付け
        BufferingHints:  # バッファリングの制限
          IntervalInSeconds: 60
          SizeInMBs: 5
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda 
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt
                    - LambdaFirehoseLoggingTransformation
                    - Arn 
              
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Join
            - ""
            - - "/aws/kinesisfirehose/"
              - !Sub "${Prefix}-firehose-delivery-stream-logging"
          LogStreamName: !Sub "${Prefix}-cloudwatch-logs-firehose-delivery-stream-logging"