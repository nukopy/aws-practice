AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for ETL task of "Enjou"
Parameters:
  IAMUser:
    Type: String
    Default: y.okuwaki@jxpress.net
  IAMUserID:
    Type: String
    Default: 489089015667
  Prefix:
    Type: String
    Description: Prefix name of resources like "test-enjou-cfn"
Conditions:
  CondtionFirehoseAssumeRole: !Equals
    - "sts:ExternalId"
    - !Ref IAMUserID
Resources:
  # IAM Policy
  PolicyLambdaBasicExecution:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${Prefix}-policy-lambda-basic-execution"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
      Users:
        - !Ref IAMUser

  PolicyS3ReadWrite:
    # https://console.aws.amazon.com/iam/home#/roles/firehose-to-s3
    Type: AWS::IAM::ManagedPolicy
    DependsOn: BucketLogging
    Properties:
      ManagedPolicyName: !Sub "${Prefix}-policy-s3-read-write"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource: "*"
              # - arn:aws:s3:::test-enjou-cloudwatch-logs-to-s3
              # - arn:aws:s3:::test-enjou-cloudwatch-logs-to-s3/*
      Users:
        - !Ref IAMUser

  # IAM Role
  RoleLambdaEntryPoint:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-lambda-entry-point"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref PolicyLambdaBasicExecution
  
  RoleLambdaFirehoseTransformation:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-lambda-firehose-transformation"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref PolicyLambdaBasicExecution

  RoleLambdaS3AvroTransformation:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-role-s3-avro-transformation"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref PolicyLambdaBasicExecution
        - !Ref PolicyS3ReadWrite

  RoleFirehoseDeliveryStream:
    Type: AWS::IAM::Role
    Condition: CondtionFirehoseAssumeRole
    Properties:
      RoleName: !Sub "${Prefix}-role-firehose-delivery-stream:"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref PolicyS3ReadWrite

  # AWS Lambda
  LambdaEntryPoint:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt
        - RoleLambdaEntryPoint
        - Arn
      Code: "../src/lambda_functions/entry-point"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-entry-point"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60

  LambdaFirehoseLoggingTransformation:
    Type: AWS::Lambda::Function
    # DependsOn: DeliveryStream
    Properties:
      Role: !GetAtt
        - RoleLambdaFirehoseTransformation
        - Arn
      Code: "../src/lambda_functions/firehose-logging-transformation"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-firehose-logging-transformation"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60

  LambdaS3AvroTransformation:
    Type: AWS::Lambda::Function
    DependsOn:
      - BucketLogging
      - BucketLoggingAvro
    Properties:
      Role: !GetAtt
        - RoleLambdaS3AvroTransformation
        - Arn
      Code: "../src/lambda_functions/s3-avro-transformation"
      FunctionName: !Join
        - "-"
        - - !Ref Prefix
          - "lambda-s3-avro-transformation"
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60
  # LambdaFunc2:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code: !Join
  #       - '/'
  #       - - !Ref LambdaCodeDirectory
  #         - 'entry-point'
  #     FunctionName: !Join
  #       - '-'
  #       - - !Ref Prefix
  #         - 'entry-point'
    # Amazon CloudWatch Logs
    # Log1:
    #   Type: AWS::Lambda::Function
    #   Properties:
    #     Tags:
    #     - Key: Name
    #       Value: FirstVPC-IGW
  # AWS S3 bucket
  BucketLogging:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Prefix}-s3-bucket-logging"
  BucketLoggingAvro:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Prefix}-s3-bucket-logging-avro"
    # Bucket2:
    #   Type: AWS::EC2::InternetGateway
    #   Properties:
    #     Tags:
    #     - Key: Name
    #       Value: FirstVPC-IGW
    # Amazon Kinesis Data Firehose
    # DeliveryStream1:
    #   Type: AWS::EC2::InternetGateway
    #   Properties:
    #     Tags:
    #     - Key: Name
    #       Value: FirstVPC-IGW
